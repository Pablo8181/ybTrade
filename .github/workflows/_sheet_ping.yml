name: _sheet_ping
on:
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check required secrets
        run: |
          ok=1
          [ -n "${{ secrets.WIF_PROVIDER }}" ] || { echo "::error::Missing secret: WIF_PROVIDER"; ok=0; }
          [ -n "${{ secrets.WIF_SERVICE_ACCOUNT }}" ] || { echo "::error::Missing secret: WIF_SERVICE_ACCOUNT"; ok=0; }
          [ -n "${{ secrets.GCP_PROJECT }}" ] || { echo "::error::Missing secret: GCP_PROJECT"; ok=0; }
          [ -n "${{ secrets.SHEET_ID }}" ] || { echo "::error::Missing secret: SHEET_ID"; ok=0; }
          [ $ok -eq 1 ] || exit 1
          echo "All required secrets present."

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Google client libs
        run: |
          python -m pip install --upgrade pip
          python -m pip install google-api-python-client==2.147.0 google-auth==2.35.0 google-auth-httplib2==0.2.0 google-auth-oauthlib==1.2.1

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          create_credentials_file: true

      - name: Preflight: Drive + Sheets R/W
        env:
          SHEET_ID: ${{ secrets.SHEET_ID }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          python - <<'PY'
          import os, json, re, sys
          from datetime import datetime, timezone
          from googleapiclient.discovery import build
          from googleapiclient.errors import HttpError
          from google.auth import default as adc
          from google.auth.transport.requests import Request

          def diag(k, v): print(f"[diag] {k}: {v}")

          sid = os.environ.get("SHEET_ID", "").strip()
          if not sid:
              print("::error::SHEET_ID is empty"); sys.exit(1)
          if "/" in sid or sid.startswith("http"):
              print("::warning::SHEET_ID looks like a URL. Use ONLY the long ID token between /d/ and /edit.")
          if not re.match(r"^[A-Za-z0-9_-]{30,}$", sid):
              print(f"::warning::SHEET_ID format unusual: {sid[:6]}...")

          scopes = [
              "https://www.googleapis.com/auth/spreadsheets",
              "https://www.googleapis.com/auth/drive.readonly",
          ]
          creds, _ = adc(scopes=scopes)
          if not creds.valid:
              creds.refresh(Request())

          acct = getattr(creds, "service_account_email", "<unknown>")
          diag("Service account (ADC)", acct)
          diag("Project", os.environ.get("GCP_PROJECT", "<unset>"))
          diag("Target Sheet ID", sid)

          # DRIVE: verify file exists and is visible
          try:
              drive = build("drive", "v3", credentials=creds, cache_discovery=False)
              meta = drive.files().get(fileId=sid, fields="id,name").execute()
              diag("Drive file name", meta.get("name"))
          except HttpError as e:
              status = getattr(e, "resp", {}).status if hasattr(e, "resp") else "?"
              try: payload = json.loads(e.content.decode("utf-8"))
              except Exception: payload = {}
              msg = payload.get("error", {}).get("message") if isinstance(payload, dict) else str(e)
              print(f"::error::Drive error ({status}): {msg}")
              if status == 404: print("HINT: Wrong SHEET_ID or not in same org.")
              if status == 403: print("HINT: Share the Sheet with the service account (Editor).")
              sys.exit(1)

          # SHEETS: read A1:Z1
          try:
              sheets = build("sheets", "v4", credentials=creds, cache_discovery=False)
              vals = sheets.spreadsheets().values().get(spreadsheetId=sid, range="A1:Z1").execute()
              diag("Sheets read A1:Z1", vals.get("values"))
          except HttpError as e:
              status = getattr(e, "resp", {}).status if hasattr(e, "resp") else "?"
              try: payload = json.loads(e.content.decode("utf-8"))
              except Exception: payload = {}
              msg = payload.get("error", {}).get("message") if isinstance(payload, dict) else str(e)
              print(f"::error::Sheets READ error ({status}): {msg}")
              if status == 403: print("HINT: Ensure Editor access for the service account.")
              if status == 404: print("HINT: Double-check SHEET_ID.")
              sys.exit(1)

          # SHEETS: write Z1
          try:
              ts = datetime.now(timezone.utc).isoformat()
              sheets.spreadsheets().values().update(
                  spreadsheetId=sid,
                  range="Z1",
                  valueInputOption="RAW",
                  body={"values": [[f"preflight ok {ts}"]]},
              ).execute()
              diag("Sheets write Z1", "OK")
          except HttpError as e:
              status = getattr(e, "resp", {}).status if hasattr(e, "resp") else "?"
              try: payload = json.loads(e.content.decode("utf-8"))
              except Exception: payload = {}
              msg = payload.get("error", {}).get("message") if isinstance(payload, dict) else str(e)
              print(f"::error::Sheets WRITE error ({status}): {msg}")
              if status == 403: print("HINT: The service account must be an Editor.")
              sys.exit(1)

          print("âœ… Preflight succeeded: Drive read + Sheets read/write OK.")
          PY
